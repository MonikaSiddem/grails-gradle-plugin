h4. Applying the Plugin

The Grails Gradle Plugin is available from Bintray's JCenter and the Maven Central repositories. Apply it to a Gradle
project the same way as any other plugin:

{code}
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.grails:grails-gradle-plugin:2.0.1'
    }
}

apply plugin: 'grails'

version = 1.0

grails {
    grailsVersion = '2.3.6'
    groovyVersion = '2.1.9'
}

repositories {
    grails.central()
}
{code}

{note}
The plugin requires that the @grails.grailsVersion@ is specified for the project. Additionally, the @version@ property
is required for executing the @init@ task since Grails needs the application version during project initialization.
{note}

{note}
While the @grails.groovyVersion@ property is not required, specifying it allows the plugin to properly configure the
Groovy runtime for the @bootstrap@ and @compile@ classpaths. Additionally, specifying it will configure a Gradle
@ResolutionStrategy@ to prevent different versions of @groovy@ or @groovy-all@ from entering the classpath through
dependencies.
{note}

{note}
If you are using the Grails Gradle Plugin to build applications with a version of Grails prior to 2.3.0, configuring the
@grails.groovyVersion@ property may have some side effects.
{note}

{warning}
Specifying a @grails.groovyVersion@ that does not match the Groovy version supplied with the specified @grails.grailsVersion@
is not supported. It is possible to make this configuration, but unforeseen behavior may occur.
{warning}

h4. Initializing a Grails Project

Once the plugin is applied, a new Grails project can be initialized through Gradle.

{code}
$ gradle init //Initializes a Grails application
{code}

OR

{code}
$ gradle init-plugin //Initializes a Grails plugin
{code}

Both tasks initialize the Grails project in the current working directory.

{note}
The plugin initializes the application/plugin with the name of the Gradle project and the current Gradle project version
{note}

h4. Configuring Project Dependencies

Using the Grails Gradle Plugin bypasses the normal Grails application build framework in favor of Gradle. The consequence
of this is that the @BuildConfig.groovy@ is no longer consulted for repository or dependency information. All repositories
and dependencies **MUST** be configured via Gradle.

{note}
Because Grails is no longer resolving the dependency information, the short syntax for plugins cannot be used:

{code}
plugins {
  compile ':resources:1.1.1'
}
{code}

In Grails, the syntax omits the Maven groupId for Grails plugins because all public Grails plugins are published under
the @org.grails.plugins@ groupId. With Gradle, the groupId **MUST** be specified:

{code}
dependencies {
    compile 'org.grails.plugins:resources:1.1.1'
}
{code}
{note}

The Grails Gradle Plugin configures the following scopes for dependency resolution: @bootstrap@, @provided@, @compile@,
@runtime@, @test@. These scopes map to the same scopes normally used in @BuildConfig.groovy@.

h4. Running the Grails Application

The Grails Gradle Plugin creates a @grails-run-app@ task on the projec that will start the Grails application container
in the normal development environment.

{code}
$ gradle grails-run-app
{code}

Grails does not ship with an application container provided, so the build must specify a Grails plugin dependency. Typically,
this will be the Grails tomcat plugin:

{code}
depedencies {
    bootstrap 'org.grails.plugins:tomcat:7.0.50'
}
{code}

{note}
Running the @grails-run-app@ task will prevent the Gradle execution from completing (i.e. the task blocks on the running container).
To terminate the Grails application, use Ctrl+C to terminate the Gradle run
{note}

h4. Running Tests

The Grails Gradle Plugin configures a @grails-test-app@ task that executes the projects tests through the Grails framework.
Additionally, the plugin configures the normal Gradle @test@ and @check@ tasks and configures the @grails-test-app@ task
as a dependency to @test@.

{code}
$ gradle grails-test-app
:grails-test-app
| Loading Grails 2.3.5
...
| Tests PASSED - view reports in /Users/jengelman/workspace/personal/gg-test/build/test-results

BUILD SUCCESSFUL

Total time: 14.181 secs

$ gradle test
:grails-test-app UP-TO-DATE
:test UP-TO-DATE

BUILD SUCCESSFUL

Total time: 1.145 secs

$ gradle check
:grails-test-app UP-TO-DATE
:test UP-TO-DATE
:check UP-TO-DATE

BUILD SUCCESSFUL

Total time: 1.177 secs
{code}

The plugin configures test results by default to be output to @build/test-results@

h4. Packaging the projects output

The Grails Gradle Plugin configures the normal Gradle @assemble@ task to execute the appropriate Grails command for
creating the project's output. For applications, the @assemble@ task depends on @grails-war@ and produces a War output.
For plugins, the @assemble@ task depends on @grails-package-plugin@ and produces the plugin Zip output.

Additionally, the plugin configures the normal Gradle @build@ task to depend on @test@ and @assemble@