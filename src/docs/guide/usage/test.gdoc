The Grails Gradle Plugin configures a @grails-test-app@ task that executes the projects tests through the Grails framework.
Additionally, the plugin configures the normal Gradle @test@ and @check@ tasks and configures the @grails-test-app@ task
as a dependency to @test@.

{code}
$ gradle grails-test-app
:grails-test-app
| Loading Grails 2.3.5
...
| Tests PASSED - view reports in /Users/jengelman/workspace/personal/gg-test/build/test-results

BUILD SUCCESSFUL

Total time: 14.181 secs

$ gradle test
:grails-test-app UP-TO-DATE
:test UP-TO-DATE

BUILD SUCCESSFUL

Total time: 1.145 secs

$ gradle check
:grails-test-app UP-TO-DATE
:test UP-TO-DATE
:check UP-TO-DATE

BUILD SUCCESSFUL

Total time: 1.177 secs
{code}

The plugin configures test results by default to be output to @build/test-results@

h4. Running Specific Test Phases

The @GrailsTestTask@ allows for configuring the specific test phases through the @phases@ property. By default the
@grails-test-app@ task is configured with no phases which results in Grails executing **ALL** test phases. This can be
modified as such:

{code}
'grails-test-app' {
    phases = ['unit:', 'integration:']
}
{code}

The above block will configure @grails-test-app@ to only execute the @unit@ and @integration@ test phases.

{note}
The @phases@ property of @GrailsTestTask@ gets passed to Grails's @test-app@ command directory. Therefor you must provide
content that is compatible with the @test-app@ command. Grails test phase/type selection is of the form @<phase>:<type>@.
Valid syntaxes include (not a complete list): @unit:
{code}
phases = ['unit:'] //Execute all tests types in the unit phase
phases = ['integration:spock'] //Execute all Spock tests in the integration phase
phases = [':unit'] //Execute all JUnit test type in all phases
{code}

Refer to the section "Targeting Test Types and/or Phases":http://grails.org/doc/2.3.x/guide/single.html#testing in the
Grails User Guide for additional information.
{note}

h4. Configuring a Test Task Rule

It may be beneficial to configure a Gradle task rule to execute specific test phases from the command line. This can
be accomplished as so:

{code}
project.tasks.addRule('Pattern: grailsTestApp-<phase>') { String taskName ->
    if (taskName.startsWith('grailsTestApp')) {
        task(taskName, type: GrailsTestTask) {
            String testPhase = (taskName - 'grailsTestApp-').toLowerCase()
            phases = [testPhase + ':']
        }
    }
}

$ gradle grailsTestApp-unit //Execute the unit test phase
{code}

{note}
When adding a a TaskRule for Grails tasks, avoid using a prefix that begins with {code}grails-{code}. This is the prefix
that the plugin uses for executing arbitrary Grails scripts. Gradle doesn't provide a method to order TaskRules, so
using this prefix will likely result in a duplicate task exception.
{note}

h4. Running Specific Tests

In matching with the Gradle standard, use the @-Dtest.single@ property to defined single tests to run. The @GrailsTestTask@
observes this system property and will pass the value as is to the Grails test task.

{code}
$ gradle grails-test-app -Dtest.single=FooController
{code}

{note}
The @--test@ syntax introduced in  Gradle 1.10 is not supported for selecting tests to execute. This is because the plugin
is delegating to the underlying @GrailsLauncher@ to execute tests and not using Gradle's @Test@ class as a base. All the
normal test selection methods for the Grails "@test-app@":http://grails.org/doc/latest/ref/Command%20Line/test-app.html
command are supported since the value of @test.single@ is passed directly as a command line argument to the Grails script.

{code}
$ gradle grails-test-app -Dtest.single="Foo Bar"
{code}
{note}

h4. Setting the Test Results Output Directly

If multiple @GrailsTestTasks@ are configured in a project and are part of the normal build process, it may be benefical
to configure each task to output its test results to a different directory. By default, Grails cleans the test output
directory before running tests so that the test report matches the tests executed. Use the @testResultsDir@ property on
@GrailsTestTask@ to configure the test output directory.

{code}
task unit(type: GrailsTestTask) {
    testResultsDir = file('build/reports/test-unit'
    phases = ['unit:']
}

task integration(type: GrailsTestTask) {
    testResultsDir = file('build/reports/test-int'
    phases = ['integration:']
}

'grails-test-app'.enabled = false // Disable the default test task that executes all phases
test.dependsOn [unit, integration] // Configure test phase tasks to execute on the 'test' task
{code}